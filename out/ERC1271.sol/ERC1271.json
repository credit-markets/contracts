{"abi":[{"type":"function","name":"eip712Domain","inputs":[],"outputs":[{"name":"fields","type":"bytes1","internalType":"bytes1"},{"name":"name","type":"string","internalType":"string"},{"name":"version","type":"string","internalType":"string"},{"name":"chainId","type":"uint256","internalType":"uint256"},{"name":"verifyingContract","type":"address","internalType":"address"},{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"extensions","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getMessageHash","inputs":[{"name":"message","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"isValidSignature","inputs":[{"name":"hash","type":"bytes32","internalType":"bytes32"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes4","internalType":"bytes4"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"eip712Domain()":"84b0196e","getMessageHash(bytes)":"0a1028c4","isValidSignature(bytes32,bytes)":"1626ba7e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See: https://eips.ethereum.org/EIPS/eip-5267\"},\"getMessageHash(bytes)\":{\"params\":{\"message\":\"Message that should be hashed.\"},\"returns\":{\"_0\":\"The replay-safe message hash.\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"The signature is valid if it is signed by the owner's private key (if the owner is an EOA) or if it is a valid ERC-1271 signature from the owner (if the owner is a contract).\",\"params\":{\"hash\":\"Hash of the data to be signed.\",\"signature\":\"Signature byte array associated with the data.\"},\"returns\":{\"_0\":\"Magic value `0x1626ba7e` if validation succeeded, else `0xffffffff`.\"}}},\"stateVariables\":{\"_1271_MAGIC_VALUE_SUCCESS\":{\"details\":\"bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getMessageHash(bytes)\":{\"notice\":\"Returns the replay-safe hash of a message that can be signed by owners.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/light-account/src/common/ERC1271.sol\":\"ERC1271\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@account-abstraction/=node_modules/@account-abstraction/\",\":@alchemy/light-account/=lib/light-account/lib/modular-account/lib/light-account/\",\":@eth-infinitism/account-abstraction/=lib/light-account/lib/modular-account/lib/account-abstraction/contracts/\",\":@ethereum-waffle/=node_modules/@ethereum-waffle/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts/=lib/light-account/lib/openzeppelin-contracts/contracts/\",\":@uniswap/=node_modules/@uniswap/\",\":account-abstraction/=lib/light-account/lib/account-abstraction/contracts/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=lib/light-account/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/light-account/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":light-account/=lib/light-account/src/\",\":modular-account/=lib/light-account/lib/modular-account/\",\":openzeppelin-contracts/=lib/light-account/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/light-account/lib/modular-account/lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/light-account/src/common/ERC1271.sol\":{\"keccak256\":\"0x17ff9df732ead3779a31dcb608c2fa9dc8d209c61b688f5055e28c0b9ea3fc4f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb41be20ec383edf9de9b007dea9ce72d60394f356e2d5e9b0e57e253a0eb23b\",\"dweb:/ipfs/Qmc1mEKxtL1srp41ZZKTYQKtmf4SX1JMmVBV2VxaFY83xr\"]},\"lib/light-account/src/external/solady/EIP712.sol\":{\"keccak256\":\"0xc256c8769c2aa92fa192d21f5f4bd4387dfc6ef095d1a18476a3c6ea2e43f4f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce6386477e8f74d89e68071c000bd98ebdab9f0ad154615b84492ff94d17a783\",\"dweb:/ipfs/QmZMX8Pivh7sJxX72pjPn2PcMREcRz1AM4oKNNgPf6bndK\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}]},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"}],"stateMutability":"view","type":"function","name":"getMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"view","type":"function","name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}]}],"devdoc":{"kind":"dev","methods":{"eip712Domain()":{"details":"See: https://eips.ethereum.org/EIPS/eip-5267"},"getMessageHash(bytes)":{"params":{"message":"Message that should be hashed."},"returns":{"_0":"The replay-safe message hash."}},"isValidSignature(bytes32,bytes)":{"details":"The signature is valid if it is signed by the owner's private key (if the owner is an EOA) or if it is a valid ERC-1271 signature from the owner (if the owner is a contract).","params":{"hash":"Hash of the data to be signed.","signature":"Signature byte array associated with the data."},"returns":{"_0":"Magic value `0x1626ba7e` if validation succeeded, else `0xffffffff`."}}},"version":1},"userdoc":{"kind":"user","methods":{"getMessageHash(bytes)":{"notice":"Returns the replay-safe hash of a message that can be signed by owners."}},"version":1}},"settings":{"remappings":["@account-abstraction/=node_modules/@account-abstraction/","@alchemy/light-account/=lib/light-account/lib/modular-account/lib/light-account/","@eth-infinitism/account-abstraction/=lib/light-account/lib/modular-account/lib/account-abstraction/contracts/","@ethereum-waffle/=node_modules/@ethereum-waffle/","@openzeppelin/=node_modules/@openzeppelin/","@openzeppelin/contracts/=lib/light-account/lib/openzeppelin-contracts/contracts/","@uniswap/=node_modules/@uniswap/","account-abstraction/=lib/light-account/lib/account-abstraction/contracts/","base64-sol/=node_modules/base64-sol/","ds-test/=lib/light-account/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/light-account/lib/openzeppelin-contracts/lib/erc4626-tests/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","light-account/=lib/light-account/src/","modular-account/=lib/light-account/lib/modular-account/","openzeppelin-contracts/=lib/light-account/lib/openzeppelin-contracts/","openzeppelin/=lib/light-account/lib/modular-account/lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/light-account/src/common/ERC1271.sol":"ERC1271"},"evmVersion":"paris","libraries":{}},"sources":{"lib/light-account/src/common/ERC1271.sol":{"keccak256":"0x17ff9df732ead3779a31dcb608c2fa9dc8d209c61b688f5055e28c0b9ea3fc4f","urls":["bzz-raw://bb41be20ec383edf9de9b007dea9ce72d60394f356e2d5e9b0e57e253a0eb23b","dweb:/ipfs/Qmc1mEKxtL1srp41ZZKTYQKtmf4SX1JMmVBV2VxaFY83xr"],"license":"MIT"},"lib/light-account/src/external/solady/EIP712.sol":{"keccak256":"0xc256c8769c2aa92fa192d21f5f4bd4387dfc6ef095d1a18476a3c6ea2e43f4f3","urls":["bzz-raw://ce6386477e8f74d89e68071c000bd98ebdab9f0ad154615b84492ff94d17a783","dweb:/ipfs/QmZMX8Pivh7sJxX72pjPn2PcMREcRz1AM4oKNNgPf6bndK"],"license":"MIT"}},"version":1},"id":53}